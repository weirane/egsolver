sygus = { cmd* }

COMMENT = _{ ";" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\n" | "\r" | "\t" }

// === 2.2 Literals ===

literal = _{ decimal | numerical | boolconst | hexconst | binconst | stringconst }

numerical = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
decimal = @{ numerical ~ "." ~ ("0"*) ~ numerical }
boolconst = { "true" | "false" }
hexconst = @{ "#x" ~ ASCII_HEX_DIGIT+ }
binconst = @{ "#b" ~ ASCII_BIN_DIGIT+ }
not_quotation = {
	(QUOTATION_MARK ~  QUOTATION_MARK  ) |
	!(QUOTATION_MARK)~
    ANY            
}
stringconst = @{ QUOTATION_MARK ~ not_quotation* ~ QUOTATION_MARK  }
specialChar = { "_" | "+" | "-" | "*" | "&" | "!" | "~" | "<"  | ">"  | "=" | "/" | "%" | "?" | "." | "$" | "^" }


// === 2.3 Symbols ===

symbol = @{(ASCII_ALPHA | ASCII_DIGIT | specialChar)+}
keyword = @{ "." ~ symbol }

// === 2.4 Identifiers ===

identifier = { symbol |  "(" ~ "_" ~ symbol ~ index+ ~ ")" }
index = { numerical | symbol }

// === 2.5 Attributes ===

attribute = { keyword ~ attribute_value? }
attribute_value = { symbol+ | sort+ | term+ }

// === 2.6 Sorts ===

sort = { identifier | "(" ~ identifier ~ sort+ ~ ")" }

// === 2.7 Terms ===

term = { 
    identifier
  | literal
  | "(" ~ identifier ~ term+ ~ ")"
  | "(" ~ !term ~ attribute+ ~ ")"
  | "(" ~ "exists" ~ "(" ~ sorted_var+ ~ ")" ~ term ~ ")"
  | "(" ~ "forall" ~ "(" ~ sorted_var+ ~ ")" ~ term ~")"
  | "(" ~ "let" ~ "(" ~ var_binding+ ~ ")" ~ term ~ ")"
   }
bf_term = { 
   identifier
  | literal
  | "(" ~ identifier ~ bf_term+ ~ ")"
  | "(" ~ !bf_term  ~  attribute+ ~ ")"

 }

sorted_var = { "(" ~ symbol ~ sort ~ ")"}
var_binding = { "(" ~ symbol ~ term ~ ")"}

// === 2.8 Features ===

feature = { ":grammars" | ":fwd-decls" | ":recursion" | ":oracles" | ":weights" }

// === 2.9 Commands ===

cmd = { 
    assume
  |  check_synth
  |  check_constraint
  |  constraint
  |  dec_var
  |  dec_weight
  |  inv_constraint
  |  optimize_synth
  |  set_feature
  |  synth_func
  | oracle_cmd
  | smt_cmd
 }


// list of Commands
assume = {"(" ~ "assume" ~ term ~ ")"}
constraint = {"(" ~ "constraint" ~ term ~ ")"}
check_synth = { "(" ~ "check-synth" ~ ")" }
check_constraint = { "(" ~  "chc-constraint" ~ "(" ~ sorted_var* ~ ")" ~  term ~ term ~ ")" }
dec_var =  { "(" ~  "declare-var" ~ symbol ~ sort ~ ")" }
dec_weight = { "(" ~  "declare-weight" ~ symbol ~ attribute* ~ ")" }
inv_constraint = { "(" ~ "inv-constraint" ~ symbol ~ symbol ~ symbol ~ symbol ~ ")" }
optimize_synth = { "(" ~  "optimize-synth" ~ "(" ~ term* ~ ")" ~ attribute* ~ ")" }
set_feature = { "(" ~  "set-feature" ~ feature ~ boolconst ~ ")" }
synth_func = { "(" ~  "synth-fun" ~ symbol ~ "(" ~ sorted_var* ~ ")" ~ sort ~ grammar_def? ~ ")" }



oracle_cmd = { 
     "(" ~ "oracle-assume" ~ "(" ~ sorted_var* ~ ")" ~ "(" ~ sorted_var* ~ ")" ~ term ~ symbol ~ ")"
  |  "(" ~ "oracle-constraint" ~ "(" ~ sorted_var* ~ ")" ~ "(" ~ sorted_var* ~ ")" ~ term ~ symbol ~ ")"
  |  "(" ~ "declare-oracle-fun" ~ symbol ~ "(" ~ sort* ~ ")" ~ sort ~ symbol ~ ")"
  |  "(" ~ "oracle-constraint-io" ~ symbol ~ symbol ~ ")"
  |  "(" ~ "oracle-constraint-cex" ~ symbol ~ symbol ~ ")"
  |  "(" ~ "oracle-constraint-membership" ~ symbol ~ symbol ~ ")"
  |  "(" ~ "oracle-constraint-poswitness" ~ symbol ~ symbol ~ ")"
  |  "(" ~ "oracle-constraint-negwitness" ~ symbol ~ symbol ~ ")"
  |  "(" ~ "declare-correctness-oracle" ~ symbol ~ symbol ~ ")"
  |  "(" ~ "declare-correctness-cex-oracle" ~ symbol ~ symbol ~ ")"
 }
smt_cmd = { 
    "(" ~ "declare-datatype" ~ symbol ~ dt_decl ~ ")"
  | "(" ~ "declare-datatypes" ~ "(" ~ dt_decl* ~ ")" ~ "(" ~ dt_decl* ~ ")" ~ ")"
  | "(" ~ "declare-sort" ~ symbol ~ numerical ~ ")"
  | "(" ~ "define-fun" ~ symbol ~  "(" ~ sorted_var* ~ ")" ~ sort ~ term ~ ")"
  | "(" ~ "define-sort" ~ symbol ~ sort ~ ")"
  | "(" ~ "set-info" ~ keyword ~ literal ~ ")"
  | "(" ~ "set-logic" ~ symbol ~ ")"
  | "(" ~ "set-option" ~ keyword ~ literal ~ ")"
 }
sort_decl = { "(" ~ symbol ~ numerical ~ ")" }
dt_decl = { "(" ~ dt_cons_decl+ ~ ")" }
dt_cons_decl = { "(" ~ symbol ~ sorted_var* ~ ")" }
grammar_def = {  ("(" ~ sorted_var+ ~ ")")? ~ "(" ~ grouped_rule_list+ ~ ")" }
grouped_rule_list = { "(" ~ symbol ~ sort ~ "(" ~ gterm+ ~ ")" ~ ")" }
gterm = { 
    "(" ~ "Constant" ~ sort ~ ")" 
  | "(" ~ "Variable" ~ sort ~ ")" 
  | bf_term
}

entry = { cmd* }






